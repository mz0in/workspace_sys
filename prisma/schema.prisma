datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum GlobalRole {
  developer
  user
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  email         String     @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          GlobalRole @default(user)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  teams      TeamMembership[]
  workspaces Workspace[]

  activeWorkspaceId String?

  @@index([id])
  @@index([email])
  @@map(name: "users")
}

enum Role {
  member
  admin
  owner
}

model TeamMembership {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  role   Role   @default(member)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@index([id])
  @@index([userId])
  @@index([teamId])
  @@map(name: "team_memberships")
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  name String
  slug String @unique

  members TeamMembership[]

  workspaces Workspace[]

  @@index([id])
  @@map(name: "teams")
}

enum WorkspaceType {
  personal
  team
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  name  String
  type  WorkspaceType @default(personal)
  color String        @default("#4f46e5")

  // a workspace can either belong to a user or a team
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String?

  @@index([id])
  @@index([userId])
  @@index([teamId])
  @@map(name: "workspaces")
}
